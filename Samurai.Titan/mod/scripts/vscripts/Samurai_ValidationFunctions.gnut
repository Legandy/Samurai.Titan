globalize_all_functions //Collection of all custom validation functions for Samurais loadouts
/*

Framework has a few pre-defined validation functions, but they are not sufficient for the Samurai loadout system.
Its possible that for your titans they will suffice:

ValidPersistentPassiveForLoadout - Compares item types, will work for any passive created using eItemsMethod.CREATE or eItemsMethod.FIND_ALL_TYPE unless you have additional requirements
ValidDecalProperty - Checks if the decal exists on the BASE titan
ValidSkinCamoPair - does Something? its mostly copied from basegame, but it works
propertyDoesNotRequireValidation - Returns true, used for properties that do not require validation
*/

//==================================================//TITAN KIT (PASSIVE 2)//==================================================//

bool function validSamuraiPassive2( string value, string property, TitanLoadoutDef validatedLoadout )
{
    switch(value)
    {
        case "pas_ronin_phase":
        case "pas_ronin_swordcore":
        case "pas_vanguard_coremeter":
        //case "pas_vanguard_doom":   
            return true
        default:
            return false
    }
    return false
}


//==================================================//AEGIS RANKS//==================================================//

/*
    if(GetCurrentPlaylistVarInt("aegis_upgrades", 0) == 1)
    {	
        entity weapon = titan.GetMainWeapons()[0]

        //RANK 1: Sword Mastery
         weapon.AddMod( "fd_sword_upgrade" )
        titan.GetOffhandWeapon( OFFHAND_MELEE ).AddMod( "fd_sword_upgrade" )

        //RANK 2: Chassis Upgrade
        loadout.setFileMods.append( "fd_health_upgrade" )

        //RANK 3: ENERGIZED SMOKE 1
        weapon.AddMod( "fd_vanguard_utility_1" )
        titan.GetOffhandWeapon( OFFHAND_SPECIAL ).AddMod( "fd_vanguard_utility_1" )

        //RANK 4: XO-16: Critical Hit
        weapon.AddMod( "fd_vanguard_weapon_2" )
        titan.GetOffhandWeapon(OFFHAND_RIGHT).AddMod( "fd_vanguard_weapon_2" )		

        //RANK 5: Shield Upgrade
        float titanShieldHealth = GetTitanSoulShieldHealth( soul )
        soul.SetShieldHealthMax( int( titanShieldHealth * 1.5 ) )

        //RANK 6: ENERGIZED SMOKE 2
        weapon.AddMod( "fd_vanguard_utility_2" )
        titan.GetOffhandWeapon( OFFHAND_SPECIAL ).AddMod( "fd_vanguard_utility_2" )

        //RANK 7: Blademaster
        weapon.AddMod( "fd_duration" )
        titan.GetOffhandWeapon( OFFHAND_EQUIPMENT ).AddMod( "fd_duration" )
    }
/*

//==================================================//MULTIPURPOSE MOUNTS//==================================================//

/*
bool function IsValidSamuraiPrimary(string value, string property, TitanLoadoutDef validatedLoadout)
{ //No longer used
    switch(value)
    {
        case "mp_titanweapon_predator_cannon":
        case "mp_titanweapon_xo16_vanguard":
        case "mp_titanweapon_leadwall":
        case "mp_titanweapon_rocketeer_rocketstream":
            return true;
        default:
            return false;
    }
    return false;
}
*/

/*
bool function IsValidSamuraiOrdnance( string value, string property, TitanLoadoutDef validatedLoadout )
{
    switch(value)
    {
        case "mp_titanweapon_salvo_rockets":
        //case "mp_titanweapon_flame_wall":
        //case "mp_titanweapon_laser_lite":
        //case "mp_titanweapon_arc_wave":
        //case "mp_titanweapon_dumbfire_rockets":
            return true;
        default:
            return false;
    }
    return false;
}


bool function IsValidSamuraiAntirodeo( string value, string property, TitanLoadoutDef validatedLoadout )
{
    switch(value)
    {
        case "mp_titanability_phase_dash":
       // case "mp_titanweapon_stun_laser":
        //case "mp_titanability_hover":
        //case "mp_titanability_laser_trip":
            return true;
        default:
            return false;
    }
    return false;
}


bool function IsValidSamuraiSpecial( string value, string property, TitanLoadoutDef validatedLoadout )
{
    switch(value)
    {
        //case "mp_titanability_particle_wall":
        //case "mp_titanweapon_heat_shield":
        //case "mp_titanweapon_vortex_shield_ion":
		case "mp_titanweapon_vortex_shield_ion":
		//case "mp_titanability_basic_block":
            return true;
        default:
            return false;
    }
    return false;
}


bool function IsValidSamuraiCore( string value, string property, TitanLoadoutDef validatedLoadout )
{
    switch(value)
    {
        //case "mp_titancore_salvo_core":
        //case "mp_titancore_laser_cannon":
       // case "mp_titancore_flame_wave":
        //case "mp_titancore_dash_core":
		case "mp_titancore_shift_core":
        //case "mp_titancore_amp_core":
            return true;
        default:
            return false;
    }
    return false;
}
*/
/*
bool function IsValidSamuraiSetFile( string value, string property, TitanLoadoutDef validatedLoadout )
{//Unimplemented
    switch(value)
    {
        case "mp_titanweapon_predator_cannon": //this code is just a placeholder becasue i dont use this in the validation table
        case "mp_titanweapon_xo16_vanguard":
        case "mp_titanweapon_leadwall":
        case "mp_titanweapon_rocketeer_rocketstream":
            return true;
        default:
            return false;
    }
    return false;
}
*/